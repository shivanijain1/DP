#include <bits/stdc++.h>
#define mod 10000000007
using namespace std;

int dp[1001][1001];
  
int robot_path(int r,int c){
  //base case 
   if (dp[0][0]==-1)
   return 0;
   // compute no of ways for 1st row 
   for (int j=0;j<c;j++){
       if (dp[0][j]==-1)
       break;
       dp[0][j]=1;
   }
   // compute no of ways for 1st col 
   for (int i=0;i<r;i++){
       if (dp[i][0]==-1)
       break;
        
       dp[i][0]=1;
   }
   //bu approach
   
   for (int i=1;i<r;i++){
       for (int j=1;j<c;j++){
           if (dp[i][j]==-1)
           continue;
           //dp[i][j]=0;
           
           if (dp[i][j-1]!=-1)
           dp[i][j]=dp[i][j-1]%mod;
           if (dp[i-1][j]!=-1)
           dp[i][j]=(dp[i][j]+dp[i-1][j])%mod;
           
       }
   }
   //check for final cell
   if (dp[r-1][c-1]==-1)
   return 0;
   
   return dp[r-1][c-1];
   //return 1;
}
int main() {
    memset (dp,0,sizeof(dp));
    // dp[1001][1001]={0};
    int r,c,n;cin>>r>>c>>n;
    //int dp[1000][1000];
    for (int i=0;i<n;i++){
        int x,y;cin>>x>>y;
        dp[x-1][y-1]=-1;
    }
    
	cout<<robot_path(r,c);
	return 0;
}
